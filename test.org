#+STARTUP: latexpreview
;;#+latex_compiler: xelatex
;;#+latex_header: \usepackage{unicode-math}

* Latex a nice?
\begin{equation}
x=\sqrt{b}
\end{equation}

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

\Omega \beta

Ahoj_{dole} Ahoj_dole
Ahoj^{nahore} Ahoj^nahore



* .emacs

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)


;;
;; helm mode
;;
(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

;;
;; ace jump mode major function
;;

(eval-after-load "org"
        '(define-key org-mode-map "\C-c " 'nil)) ; unmap key, was org-table-blank-field

(add-to-list 'load-path "~/.emacs.d/elpa/ace-jump-mode-20140616.115")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)


;; 
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC


* nìjaký pøeklad

1. Jedu vlakem.
2. Ztratil jsem vlak.
3. Ztratil jsem se ve vlaku.
4. Ztratil jsem se v autì.
5. Ztratil jsem se s autem.
6. Ztratil jsem auto.
7. Ztratil jsem letadlo.
8. Ztratil jsem se v letadle.
9. Ztratil jsem se s letadlem.
10. Ztracen cestou do autobusu.
11. Ztracen s autobusem.
12. Ztracen v autobusu.
13. Ztracený autobus.
14. Zatracený kamarád.
15. Zatracený pas dej kamarádovi.
16. Budi¾ zatracen i s kamarádem.
17. Zatracen pro kamaráda.
18. Ztracen kamarádovi.
19. Zaklínadlo o kamarádovi.
20. Ztracen bez kamaráda.
21. Ztracená kamarádka.
22. Zaklínadlo o kamarádce.
23. Obìtování bez kamarádky.
24. Rituál s kamarádkou.
25. Drogy dejte ke kamarádce.
26. Jehla v pa¾i s kamarádkou.
* ditaa

#+BEGIN_SRC ditaa :file img/hello-world.png
+--------------+
|              |
| Hello World! |
|              |
+--------------+
#+END_SRC

* okazy
[[file:test1.org][odkaz na test1.org]]


* text

** 

** d

* python
#+BEGIN_SRC python :results output
print "hello"
#+END_SRC

#+RESULTS:
: hello


#+BEGIN_SRC python
return "hello2"
#+END_SRC

#+RESULTS:
: hello2


#+BEGIN_SRC python :results output
import math
print 1 + 1 
print  "ahoj " + str( math.sqrt(4))
#+END_SRC

#+RESULTS:
: 2
: ahoj 2.0

* emacs-lisp
 #+BEGIN_SRC emacs-lisp
       (+ 1 2 3 4)
     #+END_SRC

 #+RESULTS:
 : 10

* Tabulka a graf z pythony
#+tblname: data_table
| a | 1 |
| b | 2 |
| c | 3 |

#+begin_src python :var val=1 :var data=data_table
# Return row specified by val.
# In non-session mode, use return to return results.
return(data[val])
#+end_src

#+RESULTS:
| b | 2 |

toto je zajímavé toto jsem udelal tak a tak.... 

#+begin_src python :results file
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('images/python-matplot-fig.png')
return 'images/python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:images/python-matplot-fig.png]]


* pdf tools
#+BEGIN_SRC emacs-lisp
(pdf-tools-install)
#+END_SRC

#+RESULTS:

* dot

** příklad z netu na vyzkoušení
#+BEGIN_SRC dot :file images/dot_success.png :cmdline -Kdot -Tpng
  digraph {
  // graph from left to right
  rankdir=LR;
  splines=true;
  node [shape=box];
 
  id [label="Install Graphviz"]
  conf [label="Configure org-babel"]
  dot [label="DOT in org-mode"]
 
  id -> conf
  conf -> dot
  dot -> "Profit"
  dot -> "Success" [style=dotted]
  }
#+END_SRC

#+RESULTS:
[[file:images/dot_success.png]]


[[file:images/dot_success.png]]




** hraní si s grafy

*** 
#+BEGIN_SRC dot :file images/rzn_pokus_tabelau.png
digraph "popisek hlavního grafu"{
rankdir=TD;
node [shape=record]

prvni_node [label="{<f0>name of node |<f1> this is place \n for my math formula \n $ \in $ \n Yes LaTeX does not work here :(}"]
druha_node [label="Lorem Ipsum"]

A [label="illustration"]
B [label="illustration"]
C [label="illustration"]

A -> {B C}

prvni_node -> druha_node
}
#+END_SRC

#+RESULTS:
[[file:images/rzn_pokus_tabelau.png]]

*** 

#+BEGIN_SRC dot :file images/strict.svg
strict graph{
       a--b
       a--b
       b--a [color=blue]
}
#+END_SRC     

#+RESULTS:
[[file:images/strict.svg]]

*** 
#+BEGIN_SRC dot :file images/vubec_nevim.svg
digraph obj{
        node[shape=record];
        rankdir="BT";
        
        teacher [label = "{<f0> Teacher|<f1> \n  |<f2> \n   }"];
        course [label = "{<f0> Course|<f1> \n  |<f2> \n   }"];
        student [label = "{<f0> Student|<f1> \n  |<f2> \n   }"];
        lesson [label = "{<f0> Lesson |<f1> \n  |<f2> \n   }"];
        tutorial [label = "{<f0> Tutorial|<f1> \n  |<f2> \n   }"];
        assessment[label = "{<f0> Assessment|<f1> \n  |<f2> \n   }"];
        coursework [label = "{<f0> Coursework|<f1> \n  |<f2> \n   }"];
        exam [label = "{<f0> Exam|<f1> \n  |<f2> \n   }"];

        {rank=same; teacher course student}

        teacher->course [dir="forward",arrowhead="none",arrowtail="normal",headlabel="1",taillabel="1.."];
        student->course [dir="forward",arrowhead="none",arrowtail="normal",headlabel="1",taillabel="1.."];
        lesson->course [dir="forward",arrowhead="diamond",arrowtail="normal"];
        tutorial->course [dir="forward",arrowhead="diamond",arrowtail="normal"];
        assessment->course [dir="forward",arrowhead="diamond",arrowtail="normal"];
        coursework->assessment;
        exam->assessment;

}
#+END_SRC

#+RESULTS:
[[file:images/vubec_nevim.svg]]

#+BEGIN_SRC dot :file images/pokus_matematicke_symboly.png :cmdline -Kdot -Tpng -Tpdf
  digraph threevar {
      rankdir=LR;
      size="8,4";
      node [fontsize=14 shape=box];
      edge [fontsize=10];
      center=1;
      {rank=min k }
      {rank=same X1 X2 X3 }
      {rank=max z1 z2 z3 }
      z1 [shape=circle label="d1 \n ⊤ ⊥ ∀ ℓ"];
      z2 [shape=circle label="d2"];
      z3 [shape=circle label="d3 \n ∄ ∃ ∃"];
      k [label="? &#945; &#8707; &isin; &exist;" shape="ellipse"];
      k -> X1 [label="?1 \in ∈ ∃ ⊢ ℜ ∀ "];
      k -> X2 [label="?2"];
      k -> X3 [label="?3"];
      z1 -> X1;
      z2 -> X2;
      z3 -> X3;
    }
#+END_SRC

#+RESULTS:
[[file:images/pokus_matematicke_symboly.png]]

** graf pro petra

#+BEGIN_SRC dot :file images/petr.svg
graph {
0 -- 1
1 -- 2
0 -- 4
3 -- 4
}
#+END_SRC

#+RESULTS:
[[file:images/petr.svg]]

** test grafu Hasseova diagramu

*** 00
#+BEGIN_SRC dot :file images/hasse_00.png :cmdline -Kdot -Tpng -Tpdf
  digraph hasse_00 {

      node [fontsize=10 shape=circle];
      center=1;
      rankdir=TD;
      {rank=max; 23}
      {rank=same; 13; 31}
      {rank=min; 33}
      l0 [shape="plaintext"];
      l1 [shape="plaintext"];
      l2 [shape="plaintext"];

      l0->l1->l2 [style=invis];

      33->33;
      33->31;
      33->23;
      33->13;

      31->31;
      31->23;
      31->13;

      23->23;
      23->13;

      13->13;
      
    }
#+END_SRC

#+RESULTS:
[[file:images/hasse_00.png]]

*** 
#+BEGIN_SRC dot :file images/hasse_01.png :cmdline -Kdot -Tpng -Tpdf
  digraph hasse_00 {
      rankdir=TD;
      node [fontsize=14 shape=circle];
      center=1;
      {rank=min k }
      {rank=same X1 X2 X3 }
      {rank=max z1 z2 z3 }
      z1 [shape=circle label="z1 \n ⊤ ⊥ ∀ ℓ"];
      z2 [shape=circle label="z2"];
      z3 [shape=circle label="z3 \n ∄ ∃ ∃"];
      k [label="? &#945; &#8707; &isin; &exist;" shape="ellipse"];
      k -> X1 [label="?1 \in ∈ ∃ ⊢ ℜ ∀ "];
      k -> X2 [label="?2"];
      k -> X3 [label="?3"];
      z1 -> X1;
      z2 -> X2;
      z3 -> X3;
      33->31 [shape=circle];
      33->33 [shape=circle];
    }
#+END_SRC

#+RESULTS:
[[file:images/hasse_01.png]]

* test latex unicode export
Here are some symbols I have trouble exporting:

 Unicode characters:

 ℝ ℤ ℕ ⇒ ∈ ∀ 

 Latex format:

$$\Bbb{R} \Bbb{Z} \Bbb{N} \Rightarrow \in \forall$$

* org tabulka
| a | b | c |
| 1 | 2 |   |
#+TBLFM:

** výpočty
Zdroj: [[http://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html][Org as a spreadsheet system: a short introduction]]

| Student  | Maths | Physics | Mean |
|----------+-------+---------+------|
| Bertrand |    13 |      09 |   11 |
| Henri    |    15 |      14 | 14.5 |
| Arnold   |    17 |      13 |   15 |
#+TBLFM: $4=vmean($2..$3)


| nazev                                  | dodavatel  | cena | mnozstvi | cena za 1g | cena 5g | cena 50g |
|----------------------------------------+------------+------+----------+------------+---------+----------|
| Long Jing Xi Hu nová sklizeň 2017 50g  | shengmu.cz |  238 |       50 |       4.76 |    23.8 |     238. |
| Long Jing Xi Hu nová sklizeň 2016 500g | shengmu.cz | 1500 |      500 |          3 |      15 |      150 |
| caj                                    | nedo       |  459 |      100 |       4.59 |   22.95 |    229.5 |
#+TBLFM: $5=$3 / $4::$6=$5 * 5::$7=$5 * 50

  
* table for simon

| this is table                        | values |
|--------------------------------------+--------|
| apples                               |      4 |
| banannas                             |   2345 |
| ;slkafj;lskdjf;lkdsajf;lskajflsakfdj |        |

* table for Jirik
| tabulka    | neco                               |
|------------+------------------------------------|
| anehodjfod | kdsjlfdf                           |
| $$\sin x$$ | 34fkdjfakjdfkjdkfjdkjkfdjdfkjfkjfd |
|            |                                    |
* schedule test
SCHEDULED: <2016-06-22 St>
:LOGBOOK:  
- Note taken on [2016-06-29 St 13:51] \\
  dalsi test poznamka
- Note taken on [2016-06-23 Čt 00:10] \\
  poznámka. Koukal jsem na video od Rainer Koniga. Ukazuje tam Drawer
  Logbook. Vypadá to moc pěkně.
- Note taken on [2016-06-23 Čt 00:17] \\
  tak co? už to pojede?
:END:
* 1 Test urovni 
** 2
*** 3
**** 4
***** 5
****** 6
******* 7
******** 8
********* 9
********** 10
*********** 11
************ 12
************* 13
************** 14
*************** 15
**************** 16
***************** 17
****************** 18
******************* 19
******************** 20
********************* 21
********************** 22
** TODO udelej neco
:LOGBOOK:  
- State "DONE"       from "TODO"       [2017-03-04 So 01:04]
:END:      

popis
* odkaz na soubor
[[file:test1.org][odkaz na soubor test1.org nekde]]

